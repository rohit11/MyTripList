name: Working Develop Update Feature Flags Documentation

on:
  schedule:
    - cron: '0 14 * * *'  # 6:00 AM PST
    - cron: '0 2 * * *'   # 6:00 PM PST
  push:
    paths:
      - 'FeatureFlags.tsx'  # Trigger workflow only if FeatureFlags.tsx is modified
  workflow_dispatch:  # Allow manual triggering of the workflow.

env:
  FEATURE_FLAGS_DOC: "docs/FEATURE_FLAGS.md"
  FEATURE_FLAG_FILE: "FeatureFlags.tsx"
  NUM_RELEASE_BRANCHES: 3  # Number of recent release branches to compare with

jobs:
  update-doc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all branches to ensure release branches are available

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: List All Branches and Get Latest Release Branches
        id: get-release-branches
        run: |
          echo "Listing all remote branches:"
          git branch -r

          # Initialize an empty branches array for release branches
          branches=()

          # Find and sort release branches by semantic version
          release_branches=($(git branch -r | grep 'origin/release/' | grep -E 'origin/release/[0-9]+\.[0-9]+\.[0-9]+' | sed 's|origin/||'))
          sorted_branches=($(for branch in "${release_branches[@]}"; do echo "$branch"; done | sort -V))

          # Determine the number of branches to retrieve based on NUM_RELEASE_BRANCHES or available count
          num_branches=${{ env.NUM_RELEASE_BRANCHES }}
          if [ ${#sorted_branches[@]} -lt "$num_branches" ]; then
            num_branches=${#sorted_branches[@]}
          fi

          # Add the last N sorted release branches to branches array
          for ((i=1; i<=num_branches; i++)); do
            branches+=("${sorted_branches[-$i]}")
          done

          echo "Release branches to compare (latest to oldest): ${branches[*]}"
          echo "branches=${branches[*]}" >> $GITHUB_OUTPUT

      - name: Extract Feature Flags for Each Branch
        id: extract-flags
        run: |
          function extract_flags {
            local branch=$1
            local output_file=$2

            if [ -n "$branch" ]; then
              git checkout "$branch"
              node -e "
                const fs = require('fs');
                const path = require('path');
                const featureFlagFilePath = path.resolve(__dirname, process.env.FEATURE_FLAG_FILE || 'FeatureFlags.tsx');
                const content = fs.readFileSync(featureFlagFilePath, 'utf8');
                const match = content.match(/export const FeatureFlagMapping =\\s*{([\\s\\S]+?)}/);
                if (!match || !match[1]) {
                  console.error('FeatureFlagMapping object not found in FeatureFlags.tsx');
                  process.exit(1);
                }
                const objectContent = '{' + match[1].trim() + '}';
                const FeatureFlagMapping = eval('(' + objectContent + ')');
                for (const [key, value] of Object.entries(FeatureFlagMapping)) {
                  console.log(\`\${key}=\${value}\`);
                }
              " > "$output_file"
            else
              echo "Branch $branch is not available. Skipping flag extraction."
              touch "$output_file"
            fi

            echo "Flags extracted from $branch:"
            cat "$output_file" || echo "No flags extracted from $branch"
          }

          # Extract flags for each release branch and store in separate files
          IFS=' ' read -r -a branches <<< "${{ steps.get-release-branches.outputs.branches }}"
          for branch in "${branches[@]}"; do
            extract_flags "$branch" "flags_${branch//\//_}.txt"
          done

          # Extract flags for main branch separately for final comparison
          extract_flags "main" "flags_main.txt"

      - name: Generate Comparison Markdown
        run: |
          declare -A branch_flags
          IFS=' ' read -r -a branches <<< "${{ steps.get-release-branches.outputs.branches }}"

          # Load flags for each release branch from files into associative arrays
          for branch in "${branches[@]}"; do
            declare -A flags
            while IFS='=' read -r key value; do
              flags["$key"]="$value"
            done < "flags_${branch//\//_}.txt"
            branch_flags["$branch"]="${flags[@]}"
          done

          echo "# Feature Flags Documentation" > ${{ env.FEATURE_FLAGS_DOC }}
          echo "" >> ${{ env.FEATURE_FLAGS_DOC }}

          # Define comparison function to compare flags between branches
          compare_flags() {
            local -n current_flags=$1
            local -n previous_flags=$2
            local current_branch=$3
            local previous_branch=$4

            echo "## Comparison: $current_branch vs. $previous_branch" >> ${{ env.FEATURE_FLAGS_DOC }}

            for key in "${!current_flags[@]}"; do
              current_value="${current_flags[$key]}"
              previous_value="${previous_flags[$key]:-N/A}"

              if [[ "$previous_value" == "N/A" ]]; then
                echo "| New Flag | \`$key\` | \`$current_value\` |" >> ${{ env.FEATURE_FLAGS_DOC }}
              elif [[ "$current_value" != "$previous_value" ]]; then
                echo "| Updated Flag | \`$key\` | \`$current_value\` (was \`$previous_value\`) |" >> ${{ env.FEATURE_FLAGS_DOC }}
              fi
            done

            for key in "${!previous_flags[@]}"; do
              if [[ -z "${current_flags[$key]}" ]]; then
                echo "| Deleted Flag | \`$key\` | \`$previous_flags[$key]\` |" >> ${{ env.FEATURE_FLAGS_DOC }}
              fi
            done
          }

          # Perform comparisons in sequence among release branches
          for ((i=1; i<${#branches[@]}; i++)); do
            current_branch="${branches[$i]}"
            previous_branch="${branches[$((i - 1))]}"
            compare_flags "branch_flags[$current_branch]" "branch_flags[$previous_branch]" "$current_branch" "$previous_branch"
          done

          # Separate comparison of latest release branch with main branch
          latest_release_branch="${branches[0]}"
          declare -A main_flags
          while IFS='=' read -r key value; do
            main_flags["$key"]="$value"
          done < "flags_main.txt"
          compare_flags "branch_flags[$latest_release_branch]" "main_flags" "$latest_release_branch" "main"

          echo "Generated FEATURE_FLAGS.md content:"
          cat ${{ env.FEATURE_FLAGS_DOC }}

      - name: Cleanup Temporary Files
        run: |
          rm -f flags_*.txt

      - name: Commit and Push Changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.FEATURE_FLAGS_DOC }}
          git commit -m "Update feature flags documentation with comparison" || echo "Nothing to commit"
          git push || echo "Nothing to push"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
