name: Working Develop Update Feature Flags Documentation

on:
  schedule:
    - cron: '0 14 * * *'  # 6:00 AM PST
    - cron: '0 2 * * *'   # 6:00 PM PST
  push:
    paths:
      - 'FeatureFlags.tsx'  # Trigger workflow only if FeatureFlags.tsx is modified
  workflow_dispatch:  # Allow manual triggering of the workflow.

env:
  FEATURE_FLAGS_DOC: "docs/FEATURE_FLAGS.md"
  FEATURE_FLAG_FILE: "FeatureFlags.tsx"

jobs:
  update-doc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all branches to ensure release branches are available

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: List All Branches and Get Latest Release Branches
        id: get-latest-release
        run: |
          echo "Listing all remote branches:"
          git branch -r

          release_branches=($(git branch -r | grep 'origin/release/' | grep -E 'origin/release/[0-9]+\.[0-9]+\.[0-9]+' | sed 's|origin/||'))
          sorted_branches=($(for branch in "${release_branches[@]}"; do echo "$branch"; done | sort -V))

          if [ ${#sorted_branches[@]} -eq 0 ]; then
            echo "No valid release branches found."
            echo "latest_branch=" >> $GITHUB_OUTPUT
            echo "previous_branch=" >> $GITHUB_OUTPUT
          elif [ ${#sorted_branches[@]} -eq 1 ]; then
            latest_release="${sorted_branches[0]}"
            echo "Only one release branch found: $latest_release"
            echo "latest_branch=$latest_release" >> $GITHUB_OUTPUT
            echo "previous_branch=" >> $GITHUB_OUTPUT
          else
            latest_release="${sorted_branches[-1]}"
            previous_release="${sorted_branches[-2]}"
            echo "Latest release branch found: $latest_release"
            echo "latest_branch=$latest_release" >> $GITHUB_OUTPUT
            echo "previous_branch=$previous_release" >> $GITHUB_OUTPUT
          fi

      - name: Extract Feature Flag Values
        id: extract-flags
        run: |
          function extract_values {
            local branch=$1
            local output_file=$2

            if [ -n "$branch" ]; then
              git checkout "$branch"
              node -e "
                const fs = require('fs');
                const path = require('path');
                const featureFlagFilePath = path.resolve(__dirname, process.env.FEATURE_FLAG_FILE || 'FeatureFlags.tsx');
                const content = fs.readFileSync(featureFlagFilePath, 'utf8');
                const match = content.match(/export const FeatureFlagMapping =\\s*{([\\s\\S]+?)}/);
                if (!match || !match[1]) {
                  console.error('FeatureFlagMapping object not found in FeatureFlags.tsx');
                  process.exit(1);
                }
                const objectContent = '{' + match[1].trim() + '}';
                const FeatureFlagMapping = eval('(' + objectContent + ')');
                Object.values(FeatureFlagMapping).forEach(value => {
                  console.log(value);
                });
              " > "$output_file"
            else
              echo "Branch $branch is not available. Skipping flag extraction."
              touch "$output_file"
            fi

            echo "Values extracted from $branch:"
            cat "$output_file" || echo "No values extracted from $branch"
          }

          extract_values "${{ steps.get-latest-release.outputs.latest_branch }}" latest_release_values.txt
          extract_values "${{ steps.get-latest-release.outputs.previous_branch }}" previous_release_values.txt
          extract_values "main" main_values.txt

      - name: Generate Comparison Markdown
        run: |
          # Load values into arrays for comparison
          mapfile -t latest_release_values < latest_release_values.txt
          mapfile -t previous_release_values < previous_release_values.txt
          mapfile -t main_values < main_values.txt

          echo "# Feature Flags Documentation" > ${{ env.FEATURE_FLAGS_DOC }}
          echo "" >> ${{ env.FEATURE_FLAGS_DOC }}

          # Function to compare values without keys
          compare_values() {
            local -n current_values=$1
            local -n previous_values=$2
            local current_branch=$3
            local previous_branch=$4

            # New values table
            echo "## New Values in $current_branch (Compared to $previous_branch)" >> ${{ env.FEATURE_FLAGS_DOC }}
            new_found=false
            for value in "${current_values[@]}"; do
              if [[ ! " ${previous_values[*]} " =~ " ${value} " ]]; then
                echo "- \`$value\` (Status: New ðŸ”µ, $previous_branch: N/A)" >> ${{ env.FEATURE_FLAGS_DOC }}
                new_found=true
              fi
            done
            if [ "$new_found" = false ]; then
              echo "- No new values found" >> ${{ env.FEATURE_FLAGS_DOC }}
            fi
            echo "" >> ${{ env.FEATURE_FLAGS_DOC }}

            # Deleted values table
            echo "## Deleted Values in $previous_branch (Compared to $current_branch)" >> ${{ env.FEATURE_FLAGS_DOC }}
            deleted_found=false
            for value in "${previous_values[@]}"; do
              if [[ ! " ${current_values[*]} " =~ " ${value} " ]]; then
                echo "- \`$value\` (Status: Deleted ðŸ”´, $current_branch: N/A)" >> ${{ env.FEATURE_FLAGS_DOC }}
                deleted_found=true
              fi
            done
            if [ "$deleted_found" = false ]; then
              echo "- No deleted values found" >> ${{ env.FEATURE_FLAGS_DOC }}
            fi
            echo "" >> ${{ env.FEATURE_FLAGS_DOC }}
          }

          # Compare latest and previous release branches
          if [ -n "${latest_release_values[0]}" ] && [ -n "${previous_release_values[0]}" ]; then
            compare_values latest_release_values previous_release_values "${{ steps.get-latest-release.outputs.latest_branch }}" "${{ steps.get-latest-release.outputs.previous_branch }}"
          fi

          # Compare latest release with main
          if [ -n "${latest_release_values[0]}" ]; then
            compare_values latest_release_values main_values "${{ steps.get-latest-release.outputs.latest_branch }}" "main"
          fi

          # Print standalone feature flags for each branch with count
          print_all_values() {
            local -n values=$1
            local branch_name=$2

            echo "## Feature Flags in \`$branch_name\`" >> ${{ env.FEATURE_FLAGS_DOC }}
            echo "| Count | $branch_name Value |" >> ${{ env.FEATURE_FLAGS_DOC }}
            echo "|-------|---------------------|" >> ${{ env.FEATURE_FLAGS_DOC }}

            count=1
            for value in "${values[@]}"; do
              echo "| $count | \`$value\` |" >> ${{ env.FEATURE_FLAGS_DOC }}
              ((count++))
            done
            echo "" >> ${{ env.FEATURE_FLAGS_DOC }}
          }

          # Print all feature flag values for each branch
          if [ -n "${latest_release_values[0]}" ]; then
            print_all_values latest_release_values "${{ steps.get-latest-release.outputs.latest_branch }}"
          fi
          if [ -n "${previous_release_values[0]}" ]; then
            print_all_values previous_release_values "${{ steps.get-latest-release.outputs.previous_branch }}"
          fi
          if [ -n "${main_values[0]}" ]; then
            print_all_values main_values "main"
          fi

          echo "Generated FEATURE_FLAGS.md content:"
          cat ${{ env.FEATURE_FLAGS_DOC }}

      - name: Cleanup Temporary Files
        run: |
          rm -f main_values.txt latest_release_values.txt previous_release_values.txt

      - name: Commit and Push Changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.FEATURE_FLAGS_DOC }}
          git commit -m "Update feature flags documentation with comparison" || echo "Nothing to commit"
          git push || echo "Nothing to push"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
