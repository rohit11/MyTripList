name: Generate Excel Report

on:
  workflow_dispatch:
    inputs:
      lob_new:
        description: "LOB for New JSON"
        required: true
        type: choice
        options:
          - ifp
          - cns
          - mnr
          - eni
        default: ifp
      lob_old:
        description: "LOB for Old JSON"
        required: true
        type: choice
        options:
          - ifp
          - cns
          - mnr
          - eni
        default: cns
      env_new:
        description: "Environment for New JSON"
        required: true
        type: choice
        options:
          - test
          - stage
          - prod
        default: test
      env_old:
        description: "Environment for Old JSON"
        required: true
        type: choice
        options:
          - test
          - stage
          - prod
        default: stage

jobs:
  process-json:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install dependencies
      run: npm install xlsx

    - name: Process JSON files and generate Excel
      run: |
        cat << 'EOF' > process_json_to_excel.js
        const fs = require("fs");
        const xlsx = require("xlsx");
        const https = require("https");
        const workbook = xlsx.utils.book_new();

        const EXCLUDED_KEYS = ["smartling", "lagoon.updatedBy", "lagoon.updatedAt", "id"];

        const fetchJson = (lob, env, file) => {
          const url = "https://example.com/" + lob + "/" + env + "/" + file;
          return new Promise((resolve, reject) => {
            https.get(url, (res) => {
              let data = "";
              res.on("data", (chunk) => (data += chunk));
              res.on("end", () => resolve(JSON.parse(data)));
              res.on("error", (err) => reject(err));
            });
          });
        };

        const filterKeys = (entry) => {
          const filteredEntry = { ...entry };
          EXCLUDED_KEYS.forEach((key) => delete filteredEntry[key]);
          return filteredEntry;
        };
        
        const getHeaders = (data1, data2) => {
          const allKeys = new Set();
          data1.forEach((entry) => Object.keys(entry).forEach((key) => allKeys.add(key)));
          data2.forEach((entry) => Object.keys(entry).forEach((key) => allKeys.add(key)));
          return Array.from(allKeys);
        };

        const normalizeRows = (data, headers) => {
          return data.map((entry) => {
            const row = {};
            headers.forEach((key) => {
              let value = entry[key];
              if (typeof value === "boolean") {
                value = value.toString();
              }
              row[key] = value || null;
            });
            return row;
          });
        };

        const generateSheetName = (() => {
          const usedNames = new Set();
          return (name) => {
            const baseName = name.slice(0, 31);
            let uniqueName = baseName;
            let counter = 1;
            while (usedNames.has(uniqueName)) {
              uniqueName = baseName.slice(0, 31 - counter.toString().length) + counter;
              counter++;
            }
            usedNames.add(uniqueName);
            return uniqueName;
          };
        })();

        const areEntriesEqual = (entry1, entry2) => {
          const filteredEntry1 = filterKeys(entry1);
          const filteredEntry2 = filterKeys(entry2);

          const allKeys = new Set([...Object.keys(filteredEntry1), ...Object.keys(filteredEntry2)]);

          return Array.from(allKeys).every((key) => filteredEntry1[key] === filteredEntry2[key]);
        };

                  
        const findSimilarEntries = (newData, oldData) => {
          return newData.filter((entry) => {
            const matchingOldEntry = oldData.find((oldEntry) => oldEntry.key === entry.key);
            return matchingOldEntry && areEntriesEqual(entry, matchingOldEntry);
          });
        };

        const findDifferentEntries = (newData, oldData, lobNew, lobOld) => {
          const differentEntries = [];

          newData.forEach((entry) => {
            const matchingOldEntry = oldData.find((oldEntry) => oldEntry.key === entry.key);
            if (matchingOldEntry && !areEntriesEqual(entry, matchingOldEntry)) {
              differentEntries.push({ source: "LOB: " + lobNew, ...entry });
              differentEntries.push({ source: "LOB: " + lobOld, ...matchingOldEntry });
            }
          });

          return differentEntries;
        }; 
        const generateExcelFromJson = (workbook, newJson, oldJson, parentKey, lobNew, lobOld) => {
          if (parentKey === "smartling") return;

          const worksheet = xlsx.utils.aoa_to_sheet(rows);

          console.log("Generating sheet for parent key:", parentKey);

          const newEntries = newJson[parentKey] || [];
          const oldEntries = oldJson[parentKey] || [];
          const newFiltered = newEntries.map(filterKeys);
          const oldFiltered = oldEntries.map(filterKeys);

          const headers = getHeaders(newFiltered, oldFiltered);
          const normalizedNew = normalizeRows(newFiltered, headers);
          const normalizedOld = normalizeRows(oldFiltered, headers);

          const newEntriesNew = normalizedNew.filter((entry) => !oldFiltered.some((old) => old.key === entry.key));
          const newEntriesOld = normalizedOld.filter((entry) => !newFiltered.some((newEntry) => newEntry.key === entry.key));
          const notFoundInNew = normalizedOld.filter((entry) => !newFiltered.some((newEntry) => newEntry.key === entry.key));
          const notFoundInOld = normalizedNew.filter((entry) => !oldFiltered.some((old) => old.key === entry.key));
          const similarEntries = normalizeRows(findSimilarEntries(newFiltered, oldFiltered), headers);
          const differentEntries = findDifferentEntries(newFiltered, oldFiltered, lobNew, lobOld);

          const rows = [];
          rows.push(["Parent Key: " + parentKey]);
          rows.push([]);

          const addTable = (tableName, data, headers, isDifferentEntries = false) => {
              if (data.length > 0) {
                // Add table title with styling
                rows.push([tableName]);
                const titleRowIndex = rows.length - 1; // Get the index of the title row for styling later
            
                // Add headers with styling
                rows.push(headers);
                const headerRowIndex = rows.length - 1; // Get the index of the header row for styling later
            
                // Add data rows
                let previousSource = null;
                data.forEach((entry) => {
                  if (isDifferentEntries) {
                    // Add source row if the source changes
                    if (entry.source !== previousSource) {
                      rows.push(["Source: " + entry.source]);
                      const sourceRowIndex = rows.length - 1; // Get the index of the source row for styling later
                      previousSource = entry.source;
                    }
                  }
                  // Add the actual data row
                  const row = headers.map((key) => {
                    let value = entry[key];
                    if (typeof value === "boolean") {
                      value = value.toString(); // Convert boolean to "true"/"false"
                    }
                    return value || null;
                  });
                  rows.push(row);
                });
            
                rows.push([]); // Blank row for spacing
            
                // Apply styles after adding rows
                applyStylesToRows(titleRowIndex, headerRowIndex, rows.length - 1);
              }
            };
            
            // Function to apply styles to rows
        const applyStylesToRows = (titleRowIndex, headerRowIndex, lastRowIndex) => {
              const range = xlsx.utils.decode_range(worksheet['!ref']);
              for (let R = titleRowIndex; R <= lastRowIndex; R++) {
                for (let C = range.s.c; C <= range.e.c; C++) {
                  const cellAddress = xlsx.utils.encode_cell({ r: R, c: C });
                  if (!worksheet[cellAddress]) continue;
            
                  const cell = worksheet[cellAddress];
                  if (R === titleRowIndex) {
                    // Title row (table name)
                    cell.s = { fill: { fgColor: { rgb: "FFA500" } }, font: { bold: true } }; // Orange background
                  } else if (R === headerRowIndex) {
                    // Header row
                    cell.s = { fill: { fgColor: { rgb: "FFFF00" } }, font: { bold: true } }; // Yellow background
                  } else if (rows[R] && rows[R][0]?.startsWith("Source:")) {
                    // Source rows
                    cell.s = { fill: { fgColor: { rgb: "ADD8E6" } } }; // Light blue background
                  } else if (rows[R] && rows[R][0]?.includes("New Entries")) {
                    // New Entries rows
                    cell.s = { fill: { fgColor: { rgb: "90EE90" } } }; // Light green background
                  } else if (rows[R] && rows[R][0]?.includes("Not Found")) {
                    // Not Found rows
                    cell.s = { fill: { fgColor: { rgb: "FFB6C1" } } }; // Pink background
                  } else if (rows[R] && rows[R][0]?.includes("Different Entries")) {
                    // Different Entries rows
                    cell.s = { fill: { fgColor: { rgb: "FFA500" } } }; // Orange background
                  }
                }
              }
            };



          addTable("New Entries (" + lobNew + " -> " + lobOld + ")", newEntriesNew, headers);
          addTable("New Entries (" + lobOld + " -> " + lobNew + ")", newEntriesOld, headers);
          addTable("Not Found in " + lobNew, notFoundInNew, headers);
          addTable("Not Found in " + lobOld, notFoundInOld, headers);
          addTable("Similar Entries", similarEntries, headers);
          addTable("Different Entries", differentEntries, headers, true);

          xlsx.utils.book_append_sheet(workbook, worksheet, generateSheetName(parentKey));
        };

        const lobNew = "${{ inputs.lob_new }}";
        const lobOld = "${{ inputs.lob_old }}";
        const envNew = "${{ inputs.env_new }}";
        const envOld = "${{ inputs.env_old }}";

        const newJson = JSON.parse(fs.readFileSync("new_data.json", "utf8"));
        const oldJson = JSON.parse(fs.readFileSync("old_data.json", "utf8"));

        const allParentKeys = new Set([...Object.keys(newJson), ...Object.keys(oldJson)]);

        allParentKeys.forEach((parentKey) => {
          generateExcelFromJson(workbook, newJson, oldJson, parentKey, lobNew, lobOld);
        });

        xlsx.writeFile(workbook, "report.xlsx");
        console.log("Processing complete. Check for created sheets.");
        EOF
        node process_json_to_excel.js

    - name: Upload Excel Report
      uses: actions/upload-artifact@v4
      with:
        name: json-comparison-report
        path: report.xlsx
