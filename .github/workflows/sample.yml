name: Update Feature Flags Documentation

on:
  schedule:
    - cron: '0 14 * * *'  # 6:00 AM PST
    - cron: '0 2 * * *'   # 6:00 PM PST
  push:
    paths:
      - 'FeatureFlags.tsx'  # Trigger workflow only if FeatureFlags.tsx is modified
  workflow_dispatch:  # Allow manual triggering of the workflow

env:
  FEATURE_FLAGS_DOC: "FEATURE_FLAGS.md"
  FEATURE_FLAG_FILE: "FeatureFlags.tsx"

jobs:
  identify-branches:
    runs-on: ubuntu-latest
    outputs:
      latest_branch: ${{ steps.branch-info.outputs.latest_branch }}
      previous_branch: ${{ steps.branch-info.outputs.previous_branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all branches to ensure release branches are available

      - name: Identify Release Branches
        id: branch-info
        run: |
          echo "Listing all remote branches:"
          git branch -r
          
          # Find all release branches sorted by date, and get the latest two
          release_branches=($(git branch -r --sort=-committerdate | grep 'origin/release/' | sed 's|origin/||'))
          
          if [ ${#release_branches[@]} -eq 0 ]; then
            echo "No release branches found."
            echo "latest_branch=" >> $GITHUB_OUTPUT
            echo "previous_branch=" >> $GITHUB_OUTPUT
          elif [ ${#release_branches[@]} -eq 1 ]; then
            echo "Only one release branch found: ${release_branches[0]}"
            echo "latest_branch=${release_branches[0]}" >> $GITHUB_OUTPUT
            echo "previous_branch=" >> $GITHUB_OUTPUT
          else
            echo "Latest release branch: ${release_branches[0]}"
            echo "Previous release branch: ${release_branches[1]}"
            echo "latest_branch=${release_branches[0]}" >> $GITHUB_OUTPUT
            echo "previous_branch=${release_branches[1]}" >> $GITHUB_OUTPUT
          fi

  extract-latest-release:
    runs-on: ubuntu-latest
    needs: identify-branches
    if: needs.identify-branches.outputs.latest_branch
    outputs:
      latest_release_extracted: ${{ steps.extract.outputs.latest_release_extracted }}
    steps:
      - name: Checkout latest release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.identify-branches.outputs.latest_branch }}

      - name: Extract Feature Flags from Latest Release Branch
        id: extract
        run: |
          if [ -f "${{ env.FEATURE_FLAG_FILE }}" ]; then
            node -e "
              const fs = require('fs');
              const path = require('path');
              const featureFlagFilePath = path.resolve(__dirname, process.env.FEATURE_FLAG_FILE);
              const content = fs.readFileSync(featureFlagFilePath, 'utf8');
              const match = content.match(/export const FeatureFlagMapping =\\s*{([\\s\\S]+?)}/);
              if (!match || !match[1]) {
                console.error('FeatureFlagMapping object not found in FeatureFlags.tsx');
                process.exit(1);
              }
              const objectContent = '{' + match[1].trim() + '}';
              const FeatureFlagMapping = eval('(' + objectContent + ')');
              for (const [key, value] of Object.entries(FeatureFlagMapping)) {
                console.log(\`\${key}=\${value}\`);
              }
            " > latest_release_flags.txt
            echo "latest_release_extracted=true" >> $GITHUB_OUTPUT
          else
            echo "FeatureFlags.tsx not found in latest release branch; skipping."
            touch latest_release_flags.txt
            echo "latest_release_extracted=false" >> $GITHUB_OUTPUT
          fi

  extract-previous-release:
    runs-on: ubuntu-latest
    needs: identify-branches
    if: needs.identify-branches.outputs.previous_branch
    outputs:
      previous_release_extracted: ${{ steps.extract.outputs.previous_release_extracted }}
    steps:
      - name: Checkout previous release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.identify-branches.outputs.previous_branch }}

      - name: Extract Feature Flags from Previous Release Branch
        id: extract
        run: |
          if [ -f "${{ env.FEATURE_FLAG_FILE }}" ]; then
            node -e "
              const fs = require('fs');
              const path = require('path');
              const featureFlagFilePath = path.resolve(__dirname, process.env.FEATURE_FLAG_FILE);
              const content = fs.readFileSync(featureFlagFilePath, 'utf8');
              const match = content.match(/export const FeatureFlagMapping =\\s*{([\\s\\S]+?)}/);
              if (!match || !match[1]) {
                console.error('FeatureFlagMapping object not found in FeatureFlags.tsx');
                process.exit(1);
              }
              const objectContent = '{' + match[1].trim() + '}';
              const FeatureFlagMapping = eval('(' + objectContent + ')');
              for (const [key, value] of Object.entries(FeatureFlagMapping)) {
                console.log(\`\${key}=\${value}\`);
              }
            " > previous_release_flags.txt
            echo "previous_release_extracted=true" >> $GITHUB_OUTPUT
          else
            echo "FeatureFlags.tsx not found in previous release branch; skipping."
            touch previous_release_flags.txt
            echo "previous_release_extracted=false" >> $GITHUB_OUTPUT
          fi

  extract-main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Extract Feature Flags from Main Branch
        id: extract
        run: |
          if [ -f "${{ env.FEATURE_FLAG_FILE }}" ]; then
            node -e "
              const fs = require('fs');
              const path = require('path');
              const featureFlagFilePath = path.resolve(__dirname, process.env.FEATURE_FLAG_FILE);
              const content = fs.readFileSync(featureFlagFilePath, 'utf8');
              const match = content.match(/export const FeatureFlagMapping =\\s*{([\\s\\S]+?)}/);
              if (!match || !match[1]) {
                console.error('FeatureFlagMapping object not found in FeatureFlags.tsx');
                process.exit(1);
              }
              const objectContent = '{' + match[1].trim() + '}';
              const FeatureFlagMapping = eval('(' + objectContent + ')');
              for (const [key, value] of Object.entries(FeatureFlagMapping)) {
                console.log(\`\${key}=\${value}\`);
              }
            " > main_flags.txt
          else
            echo "FeatureFlags.tsx not found in main branch; skipping."
            touch main_flags.txt
          fi

  generate-documentation:
    runs-on: ubuntu-latest
    needs: [extract-main, extract-latest-release, extract-previous-release]
    if: needs.extract-latest-release.outputs.latest_release_extracted == 'true' || needs.extract-main.outputs.main_extracted == 'true'
    steps:
      - name: Checkout for Documentation Update
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Generate Feature Flags Documentation
        run: |
          # Initialize associative arrays
          declare -A latest_release_flags previous_release_flags main_flags

          # Load flags from extracted files if they exist
          if [ -f latest_release_flags.txt ]; then
            while IFS='=' read -r key value; do
              latest_release_flags["$key"]="$value"
            done < latest_release_flags.txt
          fi

          if [ -f previous_release_flags.txt ]; then
            while IFS='=' read -r key value; do
              previous_release_flags["$key"]="$value"
            done < previous_release_flags.txt
          fi

          if [ -f main_flags.txt ]; then
            while IFS='=' read -r key value; do
              main_flags["$key"]="$value"
            done < main_flags.txt
          fi

          # Begin Markdown content
          echo "# Feature Flags Documentation" > ${{ env.FEATURE_FLAGS_DOC }}
          echo "" >> ${{ env.FEATURE_FLAGS_DOC }}

          latest_branch="${{ needs.identify-branches.outputs.latest_branch }}"
          previous_branch="${{ needs.identify-branches.outputs.previous_branch }}"

          # If two release branches are present, compare latest with previous
          if [ -n "$latest_branch" ] && [ -n "$previous_branch" ]; then
            echo "> **Comparison between \`$latest_branch\` and \`$previous_branch\`**" >> ${{ env.FEATURE_FLAGS_DOC }}
            echo "" >> ${{ env.FEATURE_FLAGS_DOC }}

            # Summary of changes between latest and previous release
            echo "## Changes Between Latest and Previous Release" >> ${{ env.FEATURE_FLAGS_DOC }}
            echo "| Key | Latest Value (\`$latest_branch\`) | Previous Value (\`$previous_branch\`) | Status |" >> ${{ env.FEATURE_FLAGS_DOC }}
            echo "|-----|----------------|------------------|--------|" >> ${{ env.FEATURE_FLAGS_DOC }}

            # Compare latest and previous release
            for key in "${!latest_release_flags[@]}"; do
              latest_value="${latest_release_flags[$key]}"
              previous_value="${previous_release_flags[$key]:-N/A}"
              if [[ "$previous_value" == "N/A" ]]; then
                status="New ðŸ”µ"
              elif [[ "$latest_value" != "$previous_value" ]]; then
                status="Updated ðŸŸ¡"
              else
                status="Unchanged âšª"
              fi
              echo "| $key | \`$latest_value\` | \`$previous_value\` | $status |" >> ${{ env.FEATURE_FLAGS_DOC }}
            done

            for key in "${!previous_release_flags[@]}"; do
              if [[ -z "${latest_release_flags[$key]}" ]]; then
                echo "| $key | N/A | \`${previous_release_flags[$key]}\` | Deleted ðŸ”´ |" >> ${{ env.FEATURE_FLAGS_DOC }}
              fi
            done
            echo "" >> ${{ env.FEATURE_FLAGS_DOC }}
          fi

          # If only one release branch, compare with main branch
          if [ -n "$latest_branch" ] && [ -z "$previous_branch" ]; then
            echo "## Comparison of \`$latest_branch\` and \`main\` Branch" >> ${{ env.FEATURE_FLAGS_DOC }}
            echo "| Key | Latest Release Value (\`$latest_branch\`) | Main Value | Status |" >> ${{ env.FEATURE_FLAGS_DOC }}
            echo "|-----|-----------------|------------|--------|" >> ${{ env.FEATURE_FLAGS_DOC }}

            # Track New, Updated, Deleted flags for a summary section
            new_flags=()
            updated_flags=()
            deleted_flags=()

            # Compare flags in latest release vs. main
            for key in "${!latest_release_flags[@]}"; do
              latest_value="${latest_release_flags[$key]}"
              main_value="${main_flags[$key]:-N/A}"
              if [[ "$main_value" == "N/A" ]]; then
                new_flags+=("| $key | \`$latest_value\` | N/A | **New ðŸ”µ** |")
              elif [[ "$latest_value" != "$main_value" ]]; then
                updated_flags+=("| $key | \`$latest_value\` | \`$main_value\` | **Updated ðŸŸ¡** |")
              fi
            done

            # Add deleted flags
            for key in "${!main_flags[@]}"; do
              if [[ -z "${latest_release_flags[$key]}" ]]; then
                deleted_flags+=("| $key | N/A | \`${main_flags[$key]}\` | **Deleted ðŸ”´** |")
              fi
            done

            # Output Summary of Changes
            if [ ${#new_flags[@]} -gt 0 ]; then
              echo "### New Flags" >> ${{ env.FEATURE_FLAGS_DOC }}
              echo "| Key | $latest_branch Value | Main Value | Status |" >> ${{ env.FEATURE_FLAGS_DOC }}
              echo "|-----|-----------------|------------|--------|" >> ${{ env.FEATURE_FLAGS_DOC }}
              printf "%s\n" "${new_flags[@]}" >> ${{ env.FEATURE_FLAGS_DOC }}
              echo "" >> ${{ env.FEATURE_FLAGS_DOC }}
            fi

            if [ ${#updated_flags[@]} -gt 0 ]; then
              echo "### Updated Flags" >> ${{ env.FEATURE_FLAGS_DOC }}
              echo "| Key | $latest_branch Value | Main Value | Status |" >> ${{ env.FEATURE_FLAGS_DOC }}
              echo "|-----|-----------------|------------|--------|" >> ${{ env.FEATURE_FLAGS_DOC }}
              printf "%s\n" "${updated_flags[@]}" >> ${{ env.FEATURE_FLAGS_DOC }}
              echo "" >> ${{ env.FEATURE_FLAGS_DOC }}
            fi

            if [ ${#deleted_flags[@]} -gt 0 ]; then
              echo "### Deleted Flags" >> ${{ env.FEATURE_FLAGS_DOC }}
              echo "| Key | $latest_branch Value | Main Value | Status |" >> ${{ env.FEATURE_FLAGS_DOC }}
              echo "|-----|-----------------|------------|--------|" >> ${{ env.FEATURE_FLAGS_DOC }}
              printf "%s\n" "${deleted_flags[@]}" >> ${{ env.FEATURE_FLAGS_DOC }}
              echo "" >> ${{ env.FEATURE_FLAGS_DOC }}
            fi

            # Full Comparison Table for all flags
            echo "## Full Feature Flags Comparison with Main Branch" >> ${{ env.FEATURE_FLAGS_DOC }}
            echo "| Key | $latest_branch Value | Main Value | Status |" >> ${{ env.FEATURE_FLAGS_DOC }}
            echo "|-----|-----------------|------------|--------|" >> ${{ env.FEATURE_FLAGS_DOC }}

            for key in "${!latest_release_flags[@]}"; do
              latest_value="${latest_release_flags[$key]}"
              main_value="${main_flags[$key]:-N/A}"
              status=""

              if [[ "$main_value" == "N/A" ]]; then
                status="New ðŸ”µ"
              elif [[ "$latest_value" != "$main_value" ]]; then
                status="Updated ðŸŸ¡"
              else
                status="Unchanged âšª"
              fi

              echo "| $key | \`$latest_value\` | \`$main_value\` | **$status** |" >> ${{ env.FEATURE_FLAGS_DOC }}
            done

            for key in "${!main_flags[@]}"; do
              if [[ -z "${latest_release_flags[$key]}" ]]; then
                echo "| $key | N/A | \`${main_flags[$key]}\` | **Deleted ðŸ”´** |" >> ${{ env.FEATURE_FLAGS_DOC }}
              fi
            done
          fi

      - name: Commit and Push Changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.FEATURE_FLAGS_DOC }}
          git commit -m "Update feature flags documentation with comparison"
          git push || echo "Nothing to push"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
