name: Update Feature Flags Documentation with Comparison

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  FEATURE_FLAGS_DOC: "FEATURE_FLAGS.md"
  FEATURE_FLAG_FILE: "FeatureFlags.tsx"

jobs:
  update-doc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Get Latest Release Branch
        id: get-latest-release
        run: |
          # Get the latest release branch matching "release/*"
          latest_release=$(git branch -r --sort=-committerdate | grep 'origin/release/' | head -n 1 | sed 's|origin/||')
          echo "branch=$latest_release" >> $GITHUB_OUTPUT

      - name: Extract Feature Flags from Latest Release Branch
        id: extract-release-flags
        run: |
          git checkout ${{ steps.get-latest-release.outputs.branch }}
          grep -oP 'is\w+Enabled:\s*\"[A-Z_]+\"' ${{ env.FEATURE_FLAG_FILE }} | sed 's/: /=/' > release_flags.txt

      - name: Extract Feature Flags from Main Branch
        id: extract-main-flags
        run: |
          git checkout main
          grep -oP 'is\w+Enabled:\s*\"[A-Z_]+\"' ${{ env.FEATURE_FLAG_FILE }} | sed 's/: /=/' > main_flags.txt

      - name: Generate Comparison Markdown
        run: |
          # Read feature flags from extracted files
          declare -A release_flags main_flags
          
          # Populate arrays with release branch flags
          while IFS='=' read -r key value; do
            release_flags["$key"]="$value"
          done < release_flags.txt

          # Populate arrays with main branch flags
          while IFS='=' read -r key value; do
            main_flags["$key"]="$value"
          done < main_flags.txt

          # Begin Markdown content
          echo "# Feature Flags Documentation" > ${{ env.FEATURE_FLAGS_DOC }}
          echo "" >> ${{ env.FEATURE_FLAGS_DOC }}
          echo "> **Comparison between \`main\` and \`${{ steps.get-latest-release.outputs.branch }}\`**" >> ${{ env.FEATURE_FLAGS_DOC }}
          echo "" >> ${{ env.FEATURE_FLAGS_DOC }}
          echo "| Count | Key | Release Value (latest release) | Main Value | Status |" >> ${{ env.FEATURE_FLAGS_DOC }}
          echo "|-------|-----|-------------------------------|------------|--------|" >> ${{ env.FEATURE_FLAGS_DOC }}

          # Comparison logic
          count=1
          for key in "${!main_flags[@]}" "${!release_flags[@]}"; do
            if [[ -z "${seen[$key]}" ]]; then
              seen[$key]=1
              release_value="${release_flags[$key]:-N/A}"
              main_value="${main_flags[$key]:-N/A}"

              # Determine the status
              if [[ "$release_value" == "$main_value" ]]; then
                status="Unchanged âšª"
              elif [[ "$release_value" == "N/A" ]]; then
                status="New ðŸ”µ"
              elif [[ "$main_value" == "N/A" ]]; then
                status="Removed ðŸ”´"
              else
                status="Updated ðŸŸ¡"
              fi

              # Append to Markdown
              echo "| $count | $key | \`$release_value\` | \`$main_value\` | **$status** |" >> ${{ env.FEATURE_FLAGS_DOC }}
              ((count++))
            fi
          done

      - name: Cleanup Temporary Files
        run: |
          rm -f main_flags.txt release_flags.txt

      - name: Commit and Push Changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.FEATURE_FLAGS_DOC }}
          git commit -m "Update feature flags documentation with comparison"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
