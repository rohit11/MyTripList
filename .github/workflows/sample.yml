name: Update Feature Flags Documentation with Comparison

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  FEATURE_FLAGS_DOC: "FEATURE_FLAGS.md"
  FEATURE_FLAG_FILE: "FeatureFlags.tsx"

jobs:
  update-doc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Get Latest Release Branch
        id: get-latest-release
        run: |
          latest_release=$(git branch -r --sort=-committerdate | grep 'origin/release/' | head -n 1 | sed 's|origin/||')
          echo "branch=$latest_release" >> $GITHUB_OUTPUT

      - name: Read Feature Flags from Latest Release Branch
        id: read-release-flags
        run: |
          git checkout ${{ steps.get-latest-release.outputs.branch }}
          node -e "
            const fs = require('fs');
            const content = fs.readFileSync('${{ env.FEATURE_FLAG_FILE }}', 'utf8');
            const regex = /export const FeatureFlagMapping =\\s*{([\\s\\S]+?)}/;
            const match = content.match(regex);
            if (!match || !match[1]) { throw new Error('FeatureFlagMapping object not found'); }
            const objectContent = '{' + match[1].trim() + '}';
            const FeatureFlagMapping = eval('(' + objectContent + ')');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, \`flags=${JSON.stringify(FeatureFlagMapping)}\n\`);
          "
        env:
          FEATURE_FLAG_FILE: ${{ env.FEATURE_FLAG_FILE }}
          GITHUB_OUTPUT: $GITHUB_OUTPUT

      - name: Read Feature Flags from Main Branch
        id: read-main-flags
        run: |
          git checkout main
          node -e "
            const fs = require('fs');
            const content = fs.readFileSync('${{ env.FEATURE_FLAG_FILE }}', 'utf8');
            const regex = /export const FeatureFlagMapping =\\s*{([\\s\\S]+?)}/;
            const match = content.match(regex);
            if (!match || !match[1]) { throw new Error('FeatureFlagMapping object not found'); }
            const objectContent = '{' + match[1].trim() + '}';
            const FeatureFlagMapping = eval('(' + objectContent + ')');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, \`flags=${JSON.stringify(FeatureFlagMapping)}\n\`);
          "
        env:
          FEATURE_FLAG_FILE: ${{ env.FEATURE_FLAG_FILE }}
          GITHUB_OUTPUT: $GITHUB_OUTPUT

      - name: Generate Comparison Markdown
        id: generate-markdown
        run: |
          node -e "
            const fs = require('fs');

            // Retrieve the JSON flags from environment variables
            const releaseFlags = JSON.parse('${{ steps.read-release-flags.outputs.flags }}');
            const mainFlags = JSON.parse('${{ steps.read-main-flags.outputs.flags }}');
            const releaseBranch = '${{ steps.get-latest-release.outputs.branch }}';

            let markdownContent = '# Feature Flags Documentation\\n\\n';
            markdownContent += '> **Comparison between `main` and `' + releaseBranch + '`**\\n\\n';
            markdownContent += '| Count | Key         | Release Value (`' + releaseBranch + '`) | Main Value   | Status           |\\n';
            markdownContent += '|-------|-------------|-------------------------|--------------|------------------|\\n';

            let count = 1;
            const allKeys = new Set([...Object.keys(releaseFlags), ...Object.keys(mainFlags)]);

            for (const key of allKeys) {
              const releaseValue = releaseFlags[key] !== undefined ? releaseFlags[key] : 'N/A';
              const mainValue = mainFlags[key] !== undefined ? mainFlags[key] : 'N/A';

              let status = 'Unchanged';
              if (releaseValue === 'N/A') {
                status = 'New ðŸ”µ';
              } else if (mainValue === 'N/A') {
                status = 'Removed ðŸ”´';
              } else if (releaseValue !== mainValue) {
                status = 'Updated ðŸŸ¡';
              } else {
                status = 'Unchanged âšª';
              }

              markdownContent += '| ' + count + '     | ' + key + ' | `' + releaseValue + '`      | `' + mainValue + '`     | **' + status + '** |\\n';
              count++;
            }

            // Write the markdown content to the specified output file
            fs.writeFileSync('${{ env.FEATURE_FLAGS_DOC }}', markdownContent, { encoding: 'utf8' });
            console.log('Comparison markdown generated successfully.');
          "
        env:
          FEATURE_FLAGS_DOC: ${{ env.FEATURE_FLAGS_DOC }}
          RELEASE_FLAGS: ${{ steps.read-release-flags.outputs.flags }}
          MAIN_FLAGS: ${{ steps.read-main-flags.outputs.flags }}
          RELEASE_BRANCH: ${{ steps.get-latest-release.outputs.branch }}

      - name: Commit and Push Changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.FEATURE_FLAGS_DOC }}
          git commit -m "Update feature flags documentation with comparison"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
