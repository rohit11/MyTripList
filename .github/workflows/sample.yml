name: Update Feature Flags Documentation with Comparison

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  FEATURE_FLAGS_DOC: "FEATURE_FLAGS.md"
  FEATURE_FLAG_FILE: "FeatureFlags.tsx"

jobs:
  update-doc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all branches to ensure release branches are available

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: List All Branches and Get Latest Release Branch
        id: get-latest-release
        run: |
          echo "Listing all remote branches:"
          git branch -r
          
          # Attempt to find the latest release branch
          latest_release=$(git branch -r --sort=-committerdate | grep 'origin/release/' | head -n 1 | sed 's|origin/||')
          if [ -z "$latest_release" ]; then
            echo "No release branch found matching 'release/*'"
            echo "branch=" >> $GITHUB_OUTPUT
          else
            echo "Latest release branch found: $latest_release"
            echo "branch=$latest_release" >> $GITHUB_OUTPUT
          fi

      - name: Extract Feature Flags from Latest Release Branch (if available)
        id: extract-release-flags
        run: |
          if [ -n "${{ steps.get-latest-release.outputs.branch }}" ]; then
            git checkout ${{ steps.get-latest-release.outputs.branch }}
            node extractFeatureFlags.js > release_flags.txt
          else
            echo "No release branch available. Skipping release flag extraction."
            touch release_flags.txt  # Create an empty file for consistency
          fi
          echo "Release flags extracted:"
          cat release_flags.txt || echo "No flags extracted from release branch"

      - name: Extract Feature Flags from Main Branch
        id: extract-main-flags
        run: |
          git checkout main
          node extractFeatureFlags.js > main_flags.txt
          echo "Main branch flags extracted:"
          cat main_flags.txt || echo "No flags extracted from main branch"

      - name: Generate Comparison Markdown
        run: |
          # Initialize associative arrays for release and main flags
          declare -A release_flags main_flags
          
          # Populate arrays with release branch flags
          while IFS='=' read -r key value; do
            release_flags["$key"]="$value"
          done < release_flags.txt

          # Populate arrays with main branch flags
          while IFS='=' read -r key value; do
            main_flags["$key"]="$value"
          done < main_flags.txt

          # Check if arrays are populated
          echo "Release Flags Array:"
          declare -p release_flags
          echo "Main Flags Array:"
          declare -p main_flags

          # Begin Markdown content
          echo "# Feature Flags Documentation" > ${{ env.FEATURE_FLAGS_DOC }}
          echo "" >> ${{ env.FEATURE_FLAGS_DOC }}
          
          # Add branch information
          release_branch="${{ steps.get-latest-release.outputs.branch }}"
          if [ -n "$release_branch" ]; then
            echo "> **Comparison between \`main\` and \`$release_branch\`**" >> ${{ env.FEATURE_FLAGS_DOC }}
          else
            echo "> **No release branch found; only main branch feature flags are displayed.**" >> ${{ env.FEATURE_FLAGS_DOC }}
          fi
          echo "" >> ${{ env.FEATURE_FLAGS_DOC }}
          echo "| Count | Key | Release Value (latest release) | Main Value | Status |" >> ${{ env.FEATURE_FLAGS_DOC }}
          echo "|-------|-----|-------------------------------|------------|--------|" >> ${{ env.FEATURE_FLAGS_DOC }}

          # Concatenate all keys without deduplication
          count=1
          for key in "${!release_flags[@]}"; do
            release_value="${release_flags[$key]}"
            main_value="${main_flags[$key]:-N/A}"

            # Determine the status
            if [[ "$release_value" == "$main_value" ]]; then
              status="Unchanged âšª"
            else
              status="Updated ðŸŸ¡"
            fi

            # Append to Markdown
            echo "| $count | $key | \`$release_value\` | \`$main_value\` | **$status** |" >> ${{ env.FEATURE_FLAGS_DOC }}
            ((count++))
          done

          # Include main branch keys that weren't in the release branch
          for key in "${!main_flags[@]}"; do
            if [[ -z "${release_flags[$key]}" ]]; then
              release_value="N/A"
              main_value="${main_flags[$key]}"

              # Mark as New if it only exists in main branch
              status="New ðŸ”µ"
              echo "| $count | $key | \`$release_value\` | \`$main_value\` | **$status** |" >> ${{ env.FEATURE_FLAGS_DOC }}
              ((count++))
            fi
          done

          # Display the generated FEATURE_FLAGS.md for debugging
          echo "Generated FEATURE_FLAGS.md content:"
          cat ${{ env.FEATURE_FLAGS_DOC }}


      - name: Cleanup Temporary Files
        run: |
          rm -f main_flags.txt release_flags.txt

      - name: Commit and Push Changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.FEATURE_FLAGS_DOC }}
          git commit -m "Update feature flags documentation with comparison" || echo "Nothing to commit"
          git push || echo "Nothing to push"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
