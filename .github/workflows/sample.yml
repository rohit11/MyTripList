name: Update Feature Flag Documentation

on:
  pull_request:
    types: [closed]
    branches:
      - main  # Trigger on pull request merges to the main branch
  push:
    branches:
      - main  # Trigger on direct commits to the main branch

jobs:
  update_feature_flag_documentation:
    if: ${{ github.event.pull_request.merged == true || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    env:
      FEATURE_FLAGS_DOC: "FEATURE_FLAGS.md"
      FEATURE_FLAG_FILE: "src/contexts/featureFlags/FeatureFlagContext.tsx"
      EXISTING_FLAGS_FILE: "existing_flags.txt"
      UPDATED_FLAGS_FILE: "updated_flags.txt"
      TABLE_HEADER: "| Feature Flag Name | Flag Key |\n|-------------------|----------|"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check if FeatureFlagContext.tsx was modified
        id: file_check
        run: |
          if git diff --name-only HEAD^1 HEAD | grep -q "$FEATURE_FLAG_FILE"; then
            echo "file_modified=true" >> $GITHUB_ENV
          else
            echo "file_modified=false" >> $GITHUB_ENV
          fi

      - name: Ensure FEATURE_FLAGS.md exists
        if: env.file_modified == 'true'
        run: |
          # Create FEATURE_FLAGS.md if it does not exist
          if [ ! -f "$FEATURE_FLAGS_DOC" ]; then
            echo -e "$TABLE_HEADER" > "$FEATURE_FLAGS_DOC"
          fi

      - name: Extract existing feature flags from documentation
        if: env.file_modified == 'true'
        run: |
          # Extract existing flags from the documentation file, if it exists
          if [ -f "$FEATURE_FLAGS_DOC" ]; then
            grep -E '^\| ' "$FEATURE_FLAGS_DOC" | tail -n +3 > "$EXISTING_FLAGS_FILE"
          else
            touch "$EXISTING_FLAGS_FILE"
          fi

      - name: Extract updated feature flags from FeatureFlagMapping
        if: env.file_modified == 'true'
        run: |
          # Extract the feature flags from FeatureFlagMapping in FeatureFlagContext.tsx
          sed -n '/FeatureFlagMapping = {/,/};/p' "$FEATURE_FLAG_FILE" | grep ":" | sed 's/,//' > "$UPDATED_FLAGS_FILE"

      - name: Merge existing and updated feature flags
        if: env.file_modified == 'true'
        run: |
          # Load existing flags into an associative array
          declare -A flag_map
          while IFS="|" read -r _ name key _; do
            flag_map["$name"]="$key"
          done < "$EXISTING_FLAGS_FILE"

          # Update the array with the latest flags, preserving order for existing flags and adding new at the end
          while IFS=":" read -r name key; do
            name=$(echo "$name" | xargs)
            key=$(echo "$key" | xargs)
            flag_map["$name"]="$key"
          done < "$UPDATED_FLAGS_FILE"

          # Generate updated table content
          echo -e "$TABLE_HEADER" > "$FEATURE_FLAGS_DOC"
          for name in "${!flag_map[@]}"; do
            echo "| $name | ${flag_map[$name]} |" >> "$FEATURE_FLAGS_DOC"
          done

      - name: Commit and Push Updated Documentation
        if: env.file_modified == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add "$FEATURE_FLAGS_DOC"
          git commit -m "Update feature flag documentation [skip ci]"
          git push
