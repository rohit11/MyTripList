name: New Compare JSON Files

on:
  workflow_dispatch:
    inputs:
      old_url:
        description: "URL of the old JSON file"
        required: true
      new_url:
        description: "URL of the new JSON file"
        required: true
      environment:
        description: "Environment (e.g., Dev, Prod)"
        required: true
      lob:
        description: "Line of Business (LOB)"
        required: true

jobs:
  compare-json:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Run JSON Comparison Script
        env:
          OLD_URL: ${{ github.event.inputs.old_url }}
          NEW_URL: ${{ github.event.inputs.new_url }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          LOB: ${{ github.event.inputs.lob }}
        run: |
          node -e "
            const axios = require('axios');
            const ExcelJS = require('exceljs');
            const fs = require('fs');

            async function fetchJson(url) {
              const response = await axios.get(url);
              return response.data;
            }

            async function compareJson() {
              const excludedKeys = ['smartling', 'lagoon.updatedBy', 'lagoon.updatedAt'];
              const environment = process.env.ENVIRONMENT;
              const lob = process.env.LOB;

              //const oldData = await fetchJson(process.env.OLD_URL);
              //const newData = await fetchJson(process.env.NEW_URL);
              // Uncomment these lines if you want to use local JSON files
               const oldData = require('old_data.json');
               const newData = require('new_data.json');

              const workbook = new ExcelJS.Workbook();
              const dataByParentKey = {};

              function removeExcludedKeys(obj) {
                const cleanedObj = {};
                Object.keys(obj).forEach(key => {
                  if (!excludedKeys.includes(key)) {
                    cleanedObj[key] = obj[key];
                  }
                });
                return cleanedObj;
              }

              function processParentKey(parentKey, oldObj, newObj, isOnlyInOld = false, isOnlyInNew = false) {
                const newEntries = [];
                const notFoundEntries = [];
                const differentEntries = [];

                const oldKeys = Object.keys(oldObj);
                const newKeys = Object.keys(newObj);

                oldKeys.forEach((key) => {
                  if (!newObj[key]) {
                    notFoundEntries.push({ source: 'Old JSON', key, ...removeExcludedKeys(oldObj[key]) });
                  } else {
                    const cleanedOldEntry = removeExcludedKeys(oldObj[key]);
                    const cleanedNewEntry = removeExcludedKeys(newObj[key]);
                    if (JSON.stringify(cleanedOldEntry) !== JSON.stringify(cleanedNewEntry)) {
                      const diffRows = [
                        { source: 'Old JSON', key, ...cleanedOldEntry },
                        { source: 'New JSON', key: '', ...cleanedNewEntry }
                      ];
                      differentEntries.push(...diffRows);
                    }
                  }
                });

                newKeys
                  .filter((key) => !oldKeys.includes(key))
                  .forEach((key) => newEntries.push({ source: 'New JSON', key, ...removeExcludedKeys(newObj[key]) }));

                if (isOnlyInOld) {
                  notFoundEntries.push(...oldKeys.map((key) => ({ source: 'Old JSON', key, ...removeExcludedKeys(oldObj[key]) })));
                }
                if (isOnlyInNew) {
                  newEntries.push(...newKeys.map((key) => ({ source: 'New JSON', key, ...removeExcludedKeys(newObj[key]) })));
                }

                dataByParentKey[parentKey] = {
                  newEntries,
                  notFoundEntries,
                  differentEntries,
                };
              }

              Object.keys(oldData).forEach((parentKey) => {
                if (parentKey !== 'smartling') {
                  const oldObj = oldData[parentKey];
                  const newObj = newData[parentKey] || {};
                  processParentKey(parentKey, oldObj, newObj, false, !newData[parentKey]);
                }
              });

              Object.keys(newData)
                .filter((parentKey) => !oldData.hasOwnProperty(parentKey) && parentKey !== 'smartling')
                .forEach((parentKey) => {
                  const newObj = newData[parentKey];
                  processParentKey(parentKey, {}, newObj, true, false);
                });

              for (const [parentKey, { newEntries, notFoundEntries, differentEntries }] of Object.entries(dataByParentKey)) {
                let sanitizedName = parentKey.replace(/[^a-zA-Z0-9]/g, '_');
                let uniqueName = sanitizedName.slice(0, 28);
                let counter = 1;

                while (workbook.getWorksheet(uniqueName)) {
                  uniqueName = sanitizedName.slice(0, 28)+counter++;
                }

                const sheet = workbook.addWorksheet(uniqueName);

                // Add Parent Key Header
                sheet.addRow([Parent Key: parentKey]);
                sheet.addRow([]); // Blank row for spacing

                // Add New Entries Table with headers
                if (newEntries.length > 0) {
                  sheet.addRow(['New Entries']);
                  sheet.columns = Object.keys(newEntries[0]).map((header) => ({ header, key: header }));
                  sheet.addRows(newEntries);
                  sheet.addRow([]);
                } else {
                  sheet.addRow(['No New Entries']);
                  sheet.addRow([]);
                }

                // Add Not Found Entries Table with headers
                if (notFoundEntries.length > 0) {
                  sheet.addRow(['Not Found Entries']);
                  sheet.columns = Object.keys(notFoundEntries[0]).map((header) => ({ header, key: header }));
                  sheet.addRows(notFoundEntries);
                  sheet.addRow([]);
                } else {
                  sheet.addRow(['No Not Found Entries']);
                  sheet.addRow([]);
                }

                // Add Different Entries Table with headers
                if (differentEntries.length > 0) {
                  sheet.addRow(['Different Entries']);
                  sheet.columns = Object.keys(differentEntries[0]).map((header) => ({ header, key: header }));
                  differentEntries.forEach((entry) => sheet.addRow(entry));
                  sheet.addRow([]);
                } else {
                  sheet.addRow(['No Different Entries']);
                  sheet.addRow([]);
                }
              }

              await workbook.xlsx.writeFile('json_differences.xlsx');
              console.log('Excel file generated successfully.');
            }

            compareJson().catch((error) => {
              console.error('Error:', error);
              process.exit(1);
            });
          "

      - name: Upload Excel Output
        uses: actions/upload-artifact@v4
        with:
          name: JSON Comparison Report
          path: json_differences.xlsx
