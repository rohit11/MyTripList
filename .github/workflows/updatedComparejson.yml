name: Compare JSON Files

on:
  workflow_dispatch:
    inputs:
      old_url:
        description: "URL of the old JSON file"
        required: true
      new_url:
        description: "URL of the new JSON file"
        required: true
      environment:
        description: "Environment (e.g., Dev, Prod)"
        required: true
      lob:
        description: "Line of Business (LOB)"
        required: true

jobs:
  compare-json:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Run JSON Comparison Script
        env:
          OLD_URL: ${{ github.event.inputs.old_url }}
          NEW_URL: ${{ github.event.inputs.new_url }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          LOB: ${{ github.event.inputs.lob }}
        run: |
          node -e "
            const fetch = require('axios');
            const ExcelJS = require('exceljs');
            const { Parser } = require('json2csv');
            const fs = require('fs');

            async function fetchJson(url) {
              const response = await fetch.get(url);
              return response.data;
            }

            function removeIgnoredKeys(obj) {
              const excludedKeys = ['id', 'lagoon.updatedBy', 'lagoon.updatedAt'];
              if (Array.isArray(obj)) {
                return obj.map((item) => removeIgnoredKeys(item));
              } else if (obj && typeof obj === 'object') {
                const result = {};
                for (const key in obj) {
                  if (!excludedKeys.includes(key)) {
                    result[key] = removeIgnoredKeys(obj[key]);
                  }
                }
                return result;
              }
              return obj;
            }

            function getValidSheetName(name, counter) {
              const sanitizedName = name.replace(/[^a-zA-Z0-9]/g, '_');
              return sanitizedName.slice(0, 28) + '_' + counter;
            }

            async function compareJson() {
              const oldDataRaw = await fetchJson(process.env.OLD_URL);
              const newDataRaw = await fetchJson(process.env.NEW_URL);
              const environment = process.env.ENVIRONMENT;
              const lob = process.env.LOB;

              const workbook = new ExcelJS.Workbook();
              const dataByParentKey = {};

              function processParentKey(parentKey, oldObj, newObj) {
                if (parentKey === 'smartling') return;

                const newEntries = [];
                const notFoundEntries = [];
                const differentEntries = [];

                const oldKeys = Object.keys(oldObj);
                const newKeys = Object.keys(newObj);

                oldKeys.forEach((key) => {
                  if (!newObj[key]) {
                    notFoundEntries.push({ key, ...oldObj[key] });
                  } else if (JSON.stringify(oldObj[key]) !== JSON.stringify(newObj[key])) {
                    const diffRows = [
                      { key, diff_type: environment + ' ' + lob + ' - Old Value', ...oldObj[key] },
                      { key: '', diff_type: environment + ' ' + lob + ' - New Value', ...newObj[key] }
                    ];
                    differentEntries.push(...diffRows);
                  }
                });

                newKeys
                  .filter((key) => !oldKeys.includes(key))
                  .forEach((key) => newEntries.push({ key, ...newObj[key] }));

                dataByParentKey[parentKey] = {
                  newEntries,
                  notFoundEntries,
                  differentEntries,
                };
              }

              Object.keys(oldDataRaw).forEach((parentKey) => {
                const oldObj = removeIgnoredKeys(oldDataRaw[parentKey]);
                const newObj = removeIgnoredKeys(newDataRaw[parentKey] || {});
                processParentKey(parentKey, oldObj, newObj);
              });

              Object.keys(newDataRaw)
                .filter((parentKey) => !oldDataRaw.hasOwnProperty(parentKey))
                .forEach((parentKey) => {
                  const newObj = removeIgnoredKeys(newDataRaw[parentKey]);
                  processParentKey(parentKey, {}, newObj);
                });

              let counter = 1;
              for (const [parentKey, { newEntries, notFoundEntries, differentEntries }] of Object.entries(dataByParentKey)) {
                const sheetName = getValidSheetName(parentKey, counter);
                counter++;
                const sheet = workbook.addWorksheet(sheetName);

                sheet.addRow(['Parent Key: ' + parentKey]);
                sheet.addRow([]);

                const allColumns = new Set([...newEntries, ...notFoundEntries, ...differentEntries].flatMap(Object.keys));
                sheet.columns = Array.from(allColumns).map((header) => ({ header, key: header }));

                if (newEntries.length > 0) {
                  sheet.addRow(['New Entries']);
                  sheet.addRow(Array.from(allColumns));
                  sheet.addRows(newEntries);
                  sheet.addRow([]);
                } else {
                  sheet.addRow(['No New Entries']);
                  sheet.addRow([]);
                }

                if (notFoundEntries.length > 0) {
                  sheet.addRow(['Not Found Entries']);
                  sheet.addRow(Array.from(allColumns));
                  sheet.addRows(notFoundEntries);
                  sheet.addRow([]);
                } else {
                  sheet.addRow(['No Not Found Entries']);
                  sheet.addRow([]);
                }

                if (differentEntries.length > 0) {
                  sheet.addRow(['Different Entries']);
                  sheet.addRow(Array.from(allColumns));
                  sheet.addRows(differentEntries);
                  sheet.addRow([]);
                } else {
                  sheet.addRow(['No Different Entries']);
                  sheet.addRow([]);
                }

                const parser = new Parser();
                if (newEntries.length > 0) fs.writeFileSync('json_csv_outputs/' + sheetName + '_new_entries.csv', parser.parse(newEntries));
                if (notFoundEntries.length > 0) fs.writeFileSync('json_csv_outputs/' + sheetName + '_not_found_entries.csv', parser.parse(notFoundEntries));
                if (differentEntries.length > 0) fs.writeFileSync('json_csv_outputs/' + sheetName + '_different_entries.csv', parser.parse(differentEntries));
              }

              await workbook.xlsx.writeFile('json_differences.xlsx');
              console.log('Excel and CSV files generated successfully.');
            }

            compareJson().catch((error) => {
              console.error('Error:', error);
              process.exit(1);
            });
          "

      - name: Upload Excel Output
        uses: actions/upload-artifact@v3
        with:
          name: JSON Comparison Report
          path: json_differences.xlsx

      - name: Upload CSV Outputs
        uses: actions/upload-artifact@v3
        with:
          name: JSON Comparison CSVs
          path: 'json_csv_outputs/*.csv'