name: New Compare JSON Files

on:
  workflow_dispatch:
    inputs:
      old_url:
        description: "URL of the old JSON file"
        required: false
      new_url:
        description: "URL of the new JSON file"
        required: false
      environment:
        description: "Environment (e.g., Dev, Prod)"
        required: true
        default: 'dev'
      lob:
        description: "Line of Business (LOB)"
        required: true
        default: 'ifp'


jobs:
  compare-json:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
        
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: |
          npm install exceljs axios    

      - name: Run JSON Comparison Script
        env:
          OLD_URL: ${{ github.event.inputs.old_url }}
          NEW_URL: ${{ github.event.inputs.new_url }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          LOB: ${{ github.event.inputs.lob }}
        run: |
          node -e "
            const axios = require('axios');
            const ExcelJS = require('exceljs');
            const fs = require('fs');

            // Function to load JSON from URL or file
            async function loadJsonFromUrlOrFile(url, filePath) {
              if (url) {
                const response = await axios.get(url);
                return response.data;
              } else {
                return JSON.parse(fs.readFileSync(filePath, 'utf8'));
              }
            }
            
            async function compareJson() {
                  const excludedKeys = ['smartling', 'lagoon.updatedBy', 'lagoon.updatedAt'];
                  const environment = process.env.ENVIRONMENT;
                  const lob = process.env.LOB;
                
                  const oldData = await loadJsonFromUrlOrFile(process.env.OLD_URL, 'old_data.json');
                  const newData = await loadJsonFromUrlOrFile(process.env.NEW_URL, 'new_data.json');
                
                  const workbook = new ExcelJS.Workbook();
                  const dataByParentKey = {};
                
                  function removeExcludedKeys(obj) {
                    const cleanedObj = {};
                    Object.keys(obj).forEach(key => {
                      if (!excludedKeys.includes(key)) {
                        cleanedObj[key] = obj[key];
                      }
                    });
                    return cleanedObj;
                  }
                
                  function processParentKey(parentKey, oldObj, newObj, isOnlyInOld = false, isOnlyInNew = false) {
                    const newEntries = [];
                    const notFoundEntries = [];
                    const differentEntries = [];
                
                    const oldKeys = Object.keys(oldObj);
                    const newKeys = Object.keys(newObj);
                
                    oldKeys.forEach((key) => {
                      if (!newObj[key]) {
                        notFoundEntries.push({ source: 'Old JSON', key, ...removeExcludedKeys(oldObj[key]) });
                      } else {
                        const cleanedOldEntry = removeExcludedKeys(oldObj[key]);
                        const cleanedNewEntry = removeExcludedKeys(newObj[key]);
                        if (JSON.stringify(cleanedOldEntry) !== JSON.stringify(cleanedNewEntry)) {
                          const diffRows = [
                            { source: 'Old JSON', key, ...cleanedOldEntry },
                            { source: 'New JSON', key: '', ...cleanedNewEntry }
                          ];
                          differentEntries.push(...diffRows);
                        }
                      }
                    });
                
                    newKeys
                      .filter((key) => !oldKeys.includes(key))
                      .forEach((key) => newEntries.push({ source: 'New JSON', key, ...removeExcludedKeys(newObj[key]) }));
                
                    if (isOnlyInOld) {
                      notFoundEntries.push(...oldKeys.map((key) => ({ source: 'Old JSON', key, ...removeExcludedKeys(oldObj[key]) })));
                    }
                    if (isOnlyInNew) {
                      newEntries.push(...newKeys.map((key) => ({ source: 'New JSON', key, ...removeExcludedKeys(newObj[key]) })));
                    }
                
                    dataByParentKey[parentKey] = {
                      newEntries,
                      notFoundEntries,
                      differentEntries,
                    };
                  }
                
                  Object.keys(oldData).forEach((parentKey) => {
                    if (parentKey !== 'smartling') {
                      const oldObj = oldData[parentKey];
                      const newObj = newData[parentKey] || {};
                      processParentKey(parentKey, oldObj, newObj, false, !newData[parentKey]);
                    }
                  });
                
                  Object.keys(newData)
                    .filter((parentKey) => !oldData.hasOwnProperty(parentKey) && parentKey !== 'smartling')
                    .forEach((parentKey) => {
                      const newObj = newData[parentKey];
                      processParentKey(parentKey, {}, newObj, true, false);
                    });
                
                  for (const [parentKey, { newEntries, notFoundEntries, differentEntries }] of Object.entries(dataByParentKey)) {
                          const sheet = workbook.addWorksheet(parentKey.replace(/[^a-zA-Z0-9]/g, '_').slice(0, 31));
                        
                          // Add Parent Key Header
                          const parentHeaderRow = sheet.addRow(['Table Name: ' + parentKey]);
                          parentHeaderRow.font = { bold: true };
                          sheet.addRow([]);
                        
                          // Add New Entries
                          if (newEntries.length > 0) {
                            const newEntriesHeader = sheet.addRow(['New Entries']);
                            newEntriesHeader.font = { bold: true };
                            // Add headers as a row
                            const newEntriesKeys = Object.keys(newEntries[0]);
                            const newEntriesHeaderRow = sheet.addRow(newEntriesKeys);
                            newEntriesHeaderRow.font = { bold: true };
                            // Add data rows
                            newEntries.forEach((entry) => {
                              sheet.addRow(newEntriesKeys.map((key) => entry[key] || ''));
                            });
                            sheet.addRow([]);
                          } else {
                            const noNewEntriesRow = sheet.addRow(['No New Entries']);
                            noNewEntriesRow.font = { bold: true };
                            sheet.addRow([]);
                          }
                        
                          // Add Not Found Entries
                          if (notFoundEntries.length > 0) {
                            const notFoundHeader = sheet.addRow(['Not Found Entries']);
                            notFoundHeader.font = { bold: true };
                            // Add headers as a row
                            const notFoundKeys = Object.keys(notFoundEntries[0]);
                            const notFoundHeaderRow = sheet.addRow(notFoundKeys);
                            notFoundHeaderRow.font = { bold: true };
                            // Add data rows
                            notFoundEntries.forEach((entry) => {
                              sheet.addRow(notFoundKeys.map((key) => entry[key] || ''));
                            });
                            sheet.addRow([]);
                          } else {
                            const noNotFoundRow = sheet.addRow(['No Not Found Entries']);
                            noNotFoundRow.font = { bold: true };
                            sheet.addRow([]);
                          }
                        
                          // Add Different Entries
                          if (differentEntries.length > 0) {
                            const differentHeader = sheet.addRow(['Different Entries']);
                            differentHeader.font = { bold: true };
                            // Add headers as a row
                            const differentKeys = Object.keys(differentEntries[0]);
                            const differentHeaderRow = sheet.addRow(differentKeys);
                            differentHeaderRow.font = { bold: true };
                            // Add data rows
                            differentEntries.forEach((entry) => {
                              sheet.addRow(differentKeys.map((key) => entry[key] || ''));
                            });
                            sheet.addRow([]);
                          } else {
                            const noDifferentRow = sheet.addRow(['No Different Entries']);
                            noDifferentRow.font = { bold: true };
                            sheet.addRow([]);
                          }
                        
                          // Ensure text wrapping for all rows
                          sheet.eachRow((row) => {
                            row.eachCell((cell) => {
                              cell.alignment = { wrapText: true };
                            });
                          });
                        }

                
                  await workbook.xlsx.writeFile('json_differences.xlsx');
                  console.log('Excel file generated successfully.');
                }

            compareJson().catch((error) => {
              console.error('Error:', error);
              process.exit(1);
            });
          "

      - name: Upload Excel Output
        uses: actions/upload-artifact@v4
        with:
          name: JSON Comparison Report
          path: json_differences.xlsx
