name: Compare JSON Files

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (e.g., Dev, Prod)"
        required: true
      lob:
        description: "Line of Business (LOB)"
        required: true
      old_url:
        description: "URL of the old JSON file (optional)"
        required: false
      new_url:
        description: "URL of the new JSON file (optional)"
        required: false

jobs:
  compare-json:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          npm install exceljs json2csv axios

      - name: Run JSON Comparison Script
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          LOB: ${{ github.event.inputs.lob }}
          OLD_URL: ${{ github.event.inputs.old_url }}
          NEW_URL: ${{ github.event.inputs.new_url }}
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            const axios = require('axios');
            const ExcelJS = require('exceljs');
            const { Parser } = require('json2csv');

            // Function to load JSON from URL or file
            async function loadJsonFromUrlOrFile(url, filePath) {
              if (url) {
                const response = await axios.get(url);
                return response.data;
              } else {
                return JSON.parse(fs.readFileSync(filePath, 'utf8'));
              }
            }

            async function compareJson() {
              const environment = process.env.ENVIRONMENT;
              const lob = process.env.LOB;

              // Load JSON files (choose between URL and local file)
              // Uncomment the URL-based loading below to use URLs, or comment it out to use local files.
              
              const oldData = await loadJsonFromUrlOrFile(process.env.OLD_URL, './old_data.json');
              const newData = await loadJsonFromUrlOrFile(process.env.NEW_URL, './new_data.json');

              /*
              // URL-based loading (uncomment this section to load from URLs)
              const oldData = await axios.get(process.env.OLD_URL).then(res => res.data);
              const newData = await axios.get(process.env.NEW_URL).then(res => res.data);
              */

              const workbook = new ExcelJS.Workbook();
              const dataByParentKey = {};

              function processParentKey(parentKey, oldObj, newObj) {
                const newEntries = [];
                const notFoundEntries = [];
                const differentEntries = [];

                const oldKeys = Object.keys(oldObj);
                const newKeys = Object.keys(newObj);

                oldKeys.forEach((key) => {
                  if (!newObj[key]) {
                    notFoundEntries.push({ key, ...oldObj[key] });
                  } else if (JSON.stringify(oldObj[key]) !== JSON.stringify(newObj[key])) {
                    const diffRows = [
                      { key, diff_type: `${environment} ${lob} - Old Value`, ...oldObj[key] },
                      { key: '', diff_type: `${environment} ${lob} - New Value`, ...newObj[key] }
                    ];
                    differentEntries.push(...diffRows);
                  }
                });

                newKeys
                  .filter((key) => !oldKeys.includes(key))
                  .forEach((key) => newEntries.push({ key, ...newObj[key] }));

                dataByParentKey[parentKey] = {
                  newEntries,
                  notFoundEntries,
                  differentEntries,
                };
              }

              Object.keys(oldData).forEach((parentKey) => {
                const oldObj = oldData[parentKey];
                const newObj = newData[parentKey] || {};
                processParentKey(parentKey, oldObj, newObj);
              });

              Object.keys(newData)
                .filter((parentKey) => !oldData.hasOwnProperty(parentKey))
                .forEach((parentKey) => {
                  const newObj = newData[parentKey];
                  processParentKey(parentKey, {}, newObj);
                });

              for (const [parentKey, { newEntries, notFoundEntries, differentEntries }] of Object.entries(dataByParentKey)) {
                let sheetName = parentKey.slice(0, 31); // Limit sheet name to 31 characters
                let counter = 1;

                // Handle duplicate sheet names
                while (workbook.getWorksheet(sheetName)) {
                  sheetName = `${parentKey.slice(0, 28)}_${counter++}`;
                }

                const sheet = workbook.addWorksheet(sheetName);

                if (newEntries.length > 0) {
                  sheet.addRow(['New Entries']);
                  sheet.columns = Object.keys(newEntries[0]).map((header) => ({ header, key: header }));
                  sheet.addRows(newEntries);
                  sheet.addRow([]);
                } else {
                  sheet.addRow(['No New Entries']);
                  sheet.addRow([]);
                }

                if (notFoundEntries.length > 0) {
                  sheet.addRow(['Not Found Entries']);
                  sheet.columns = Object.keys(notFoundEntries[0]).map((header) => ({ header, key: header }));
                  sheet.addRows(notFoundEntries);
                  sheet.addRow([]);
                } else {
                  sheet.addRow(['No Not Found Entries']);
                  sheet.addRow([]);
                }

                if (differentEntries.length > 0) {
                  sheet.addRow(['Different Entries']);
                  sheet.columns = Object.keys(differentEntries[0]).map((header) => ({ header, key: header }));
                  differentEntries.forEach((entry) => sheet.addRow(entry));
                  sheet.addRow([]);
                } else {
                  sheet.addRow(['No Different Entries']);
                  sheet.addRow([]);
                }

                const parser = new Parser();
                if (newEntries.length > 0) fs.writeFileSync(`json_csv_outputs/${parentKey}_new_entries.csv`, parser.parse(newEntries));
                if (notFoundEntries.length > 0) fs.writeFileSync(`json_csv_outputs/${parentKey}_not_found_entries.csv`, parser.parse(notFoundEntries));
                if (differentEntries.length > 0) fs.writeFileSync(`json_csv_outputs/${parentKey}_different_entries.csv`, parser.parse(differentEntries));
              }

              await workbook.xlsx.writeFile('json_differences.xlsx');
              console.log('Excel and CSV files generated successfully.');
            }

            compareJson().catch((error) => {
              console.error('Error:', error);
              process.exit(1);
            });
          "

      - name: Upload Excel Output
        uses: actions/upload-artifact@v3
        with:
          name: JSON Comparison Report
          path: json_differences.xlsx

      - name: Upload CSV Outputs
        uses: actions/upload-artifact@v3
        with:
          name: JSON Comparison CSVs
          path: 'json_csv_outputs/*.csv'