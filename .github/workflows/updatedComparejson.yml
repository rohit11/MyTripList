name: New Compare JSON Files

on:
  workflow_dispatch:
    inputs:
      old_url:
        description: "URL of the old JSON file"
        required: false
      old_environment:
        description: "Environment for the old JSON file"
        required: true
        type: choice
        options:
          - test
          - stage
          - prod
        default: test
      old_lob:
        description: "Line of Business (LOB) for the old JSON file"
        required: true
        type: choice
        options:
          - eni
          - mnr
          - cns
          - ifp
        default: cns
      new_url:
        description: "URL of the new JSON file"
        required: false
      new_environment:
        description: "Environment for the new JSON file"
        required: true
        type: choice
        options:
          - test
          - stage
          - prod
        default: test
      new_lob:
        description: "Line of Business (LOB) for the new JSON file"
        required: true
        type: choice
        options:
          - eni
          - mnr
          - cns
          - ifp
        default: cns

jobs:
  compare-json:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          npm install exceljs axios    

      - name: Run JSON Comparison Script
        env:
          OLD_URL: ${{ github.event.inputs.old_url }}
          OLD_ENVIRONMENT: ${{ github.event.inputs.old_environment }}
          OLD_LOB: ${{ github.event.inputs.old_lob }}
          NEW_URL: ${{ github.event.inputs.new_url }}
          NEW_ENVIRONMENT: ${{ github.event.inputs.new_environment }}
          NEW_LOB: ${{ github.event.inputs.new_lob }}
        run: |
          node -e "
            const axios = require('axios');
            const ExcelJS = require('exceljs');
            const fs = require('fs');

            const excludedKeys = ['smartling', 'lagoon.updatedBy', 'lagoon.updatedAt', 'id'];
            const oldEnvironment = process.env.OLD_ENVIRONMENT;
            const oldLob = process.env.OLD_LOB;
            const newEnvironment = process.env.NEW_ENVIRONMENT;
            const newLob = process.env.NEW_LOB;

            const OLD_JSON = oldLob;
            const NEW_JSON = newLob;

            async function loadJsonFromUrlOrFile(url, filePath) {
              if (url) {
                const response = await axios.get(url);
                return response.data;
              } else {
                return JSON.parse(fs.readFileSync(filePath, 'utf8'));
              }
            }

            async function compareJson() {
              const oldData = await loadJsonFromUrlOrFile('', 'old_data.json');
              const newData = await loadJsonFromUrlOrFile('', 'new_data.json');

              const workbook = new ExcelJS.Workbook();
              const sheet = workbook.addWorksheet('Comparison Results');

              function removeExcludedKeys(obj) {
                const cleanedObj = {};
                Object.keys(obj).forEach((key) => {
                  if (!excludedKeys.includes(key)) {
                    cleanedObj[key] = obj[key];
                  }
                });
                return cleanedObj;
              }

              const newEntries = [];
              const notFoundEntries = [];
              const differentEntries = [];
              const similarEntries = [];

              Object.keys(oldData).forEach((key) => {
                const oldEntry = removeExcludedKeys(oldData[key]);
                const newEntry = removeExcludedKeys(newData[key] || {});

                if (!newData[key]) {
                  notFoundEntries.push({ source: 'Old JSON', key, ...oldEntry });
                } else if (JSON.stringify(oldEntry) !== JSON.stringify(newEntry)) {
                  differentEntries.push(
                    { source: 'Old JSON', key, ...oldEntry },
                    { source: 'New JSON', key, ...newEntry }
                  );
                } else {
                  similarEntries.push({ source: 'Old JSON and New JSON', key, ...oldEntry });
                }
              });

              Object.keys(newData).forEach((key) => {
                if (!oldData[key]) {
                  const newEntry = removeExcludedKeys(newData[key]);
                  newEntries.push({ source: 'New JSON', key, ...newEntry });
                }
              });

              function addSection(title, entries) {
                if (entries.length > 0) {
                  sheet.addRow([title]).font = { bold: true };
                  const headers = Object.keys(entries[0]);
                  sheet.addRow(headers).font = { bold: true };
                  entries.forEach((entry) => {
                    sheet.addRow(headers.map((header) => entry[header] || ''));
                  });
                  sheet.addRow([]);
                }
              }

              addSection('New Entries', newEntries);
              addSection('Not Found Entries', notFoundEntries);
              addSection('Different Entries', differentEntries);
              addSection('Similar Entries', similarEntries);

              await workbook.xlsx.writeFile('json_differences.xlsx');
              console.log('Excel file generated successfully.');
            }

            compareJson().catch((error) => {
              console.error('Error:', error);
              process.exit(1);
            });
          "

      - name: Upload Excel Output
        uses: actions/upload-artifact@v4
        with:
          name: JSON Comparison Report
          path: json_differences.xlsx
