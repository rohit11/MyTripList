name: Working Develop Update Feature Flags Documentation

on:
  schedule:
    - cron: '0 14 * * *'  # 6:00 AM PST
    - cron: '0 2 * * *'   # 6:00 PM PST
  push:
    paths:
      - 'FeatureFlags.tsx'  # Trigger workflow only if FeatureFlags.tsx is modified
  workflow_dispatch:  # Allow manual triggering of the workflow.      

env:
  FEATURE_FLAGS_DOC: "docs/FEATURE_FLAGS.md"
  FEATURE_FLAG_FILE: "FeatureFlags.tsx"

jobs:
  update-doc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all branches to ensure release branches are available

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: List All Branches and Get Latest Release Branches
        id: get-latest-release
        run: |
          echo "Listing all remote branches:"
          git branch -r
          
          release_branches=($(git branch -r | grep 'origin/release/' | grep -E 'origin/release/[0-9]+\.[0-9]+\.[0-9]+' | sed 's|origin/||'))

          sorted_branches=($(for branch in "${release_branches[@]}"; do
            echo "$branch"
          done | sort -V))

          if [ ${#sorted_branches[@]} -eq 0 ]; then
            echo "No valid release branches found."
            echo "latest_branch=" >> $GITHUB_OUTPUT
            echo "previous_branch=" >> $GITHUB_OUTPUT
          elif [ ${#sorted_branches[@]} -eq 1 ]; then
            latest_release="${sorted_branches[0]}"
            echo "Only one release branch found: $latest_release"
            echo "latest_branch=$latest_release" >> $GITHUB_OUTPUT
            echo "previous_branch=" >> $GITHUB_OUTPUT
          else
            latest_release="${sorted_branches[-1]}"
            previous_release="${sorted_branches[-2]}"
            echo "Latest release branch found: $latest_release"
            echo "latest_branch=$latest_release" >> $GITHUB_OUTPUT
            echo "Previous release branch found: $previous_release"
            echo "previous_branch=$previous_release" >> $GITHUB_OUTPUT
          fi

      - name: Extract Feature Flags
        id: extract-flags
        run: |
          function extract_flags {
            local branch=$1
            local output_file=$2

            if [ -n "$branch" ]; then
              git checkout "$branch"
              node -e "
                const fs = require('fs');
                const path = require('path');
                const featureFlagFilePath = path.resolve(__dirname, process.env.FEATURE_FLAG_FILE || 'FeatureFlags.tsx');
                const content = fs.readFileSync(featureFlagFilePath, 'utf8');
                const match = content.match(/export const FeatureFlagMapping =\\s*{([\\s\\S]+?)}/);
                if (!match || !match[1]) {
                  console.error('FeatureFlagMapping object not found in FeatureFlags.tsx');
                  process.exit(1);
                }
                const objectContent = '{' + match[1].trim() + '}';
                const FeatureFlagMapping = eval('(' + objectContent + ')');
                for (const [key, value] of Object.entries(FeatureFlagMapping)) {
                  console.log(\`\${key}=\${value}\`);
                }
              " > "$output_file"
            else
              echo "Branch $branch is not available. Skipping flag extraction."
              touch "$output_file"
            fi

            echo "Flags extracted from $branch:"
            cat "$output_file" || echo "No flags extracted from $branch"
          }

          extract_flags "${{ steps.get-latest-release.outputs.latest_branch }}" latest_release_flags.txt
          extract_flags "${{ steps.get-latest-release.outputs.previous_branch }}" previous_release_flags.txt
          extract_flags "main" main_flags.txt

      - name: Generate Comparison Markdown
        run: |
          declare -A latest_release_flags previous_release_flags main_flags

          while IFS='=' read -r key value; do
            latest_release_flags["$key"]="$value"
          done < latest_release_flags.txt

          while IFS='=' read -r key value; do
            previous_release_flags["$key"]="$value"
          done < previous_release_flags.txt

          while IFS='=' read -r key value; do
            main_flags["$key"]="$value"
          done < main_flags.txt

          echo "# Feature Flags Documentation" > ${{ env.FEATURE_FLAGS_DOC }}
          echo "" >> ${{ env.FEATURE_FLAGS_DOC }}

          latest_branch="${{ steps.get-latest-release.outputs.latest_branch }}"
          previous_branch="${{ steps.get-latest-release.outputs.previous_branch }}"

          print_standalone_flags() {
              local -n flags=$1
              local branch_name=$2

              echo "## Feature Flags in \`$branch_name\`" >> ${{ env.FEATURE_FLAGS_DOC }}
              echo "| Count | $branch_name Value |" >> ${{ env.FEATURE_FLAGS_DOC }}
              echo "|-------|---------------------|" >> ${{ env.FEATURE_FLAGS_DOC }}

              count=1
              for key in "${!flags[@]}"; do
                echo "| $count | \`${flags[$key]}\` |" >> ${{ env.FEATURE_FLAGS_DOC }}
                ((count++))
              done
              echo "" >> ${{ env.FEATURE_FLAGS_DOC }}
          }

          generate_summary_table() {
              local -n latest_flags=$1
              local -n previous_flags=$2
              local latest_branch=$3
              local previous_branch=$4
              local section_title=$5

              echo "## $section_title (New, Updated, Deleted Flags)" >> ${{ env.FEATURE_FLAGS_DOC }}

              new_changes=()
              updated_changes=()
              deleted_changes=()

              for key in "${!latest_flags[@]}"; do
                latest_value="${latest_flags[$key]}"
                previous_value="${previous_flags[$key]:-N/A}"

                if [[ "$previous_value" == "N/A" ]]; then
                  new_changes+=("| \`$latest_value\` | N/A | New ðŸ”µ |")
                elif [[ "$latest_value" != "$previous_value" ]]; then
                  updated_changes+=("| \`$latest_value\` | \`$previous_value\` | Updated ðŸŸ¡ |")
                fi
              done

              for key in "${!previous_flags[@]}"; do
                if [[ -z "${latest_flags[$key]}" ]]; then
                  deleted_changes+=("| N/A | \`${previous_flags[$key]}\` | Deleted ðŸ”´ |")
                fi
              done

              if [ ${#new_changes[@]} -gt 0 ]; then
                echo "### New Flags" >> ${{ env.FEATURE_FLAGS_DOC }}
                echo "| $latest_branch Value | $previous_branch Value | Status |" >> ${{ env.FEATURE_FLAGS_DOC }}
                echo "|----------------------|------------------------|--------|" >> ${{ env.FEATURE_FLAGS_DOC }}
                printf "%s\n" "${new_changes[@]}" >> ${{ env.FEATURE_FLAGS_DOC }}
              else
                echo "### New Flags" >> ${{ env.FEATURE_FLAGS_DOC }}
                echo "| No differences found |" >> ${{ env.FEATURE_FLAGS_DOC }}
              fi

              if [ ${#updated_changes[@]} -gt 0 ]; then
                echo "### Updated Flags" >> ${{ env.FEATURE_FLAGS_DOC }}
                echo "| $latest_branch Value | $previous_branch Value | Status |" >> ${{ env.FEATURE_FLAGS_DOC }}
                echo "|----------------------|------------------------|--------|" >> ${{ env.FEATURE_FLAGS_DOC }}
                printf "%s\n" "${updated_changes[@]}" >> ${{ env.FEATURE_FLAGS_DOC }}
              else
                echo "### Updated Flags" >> ${{ env.FEATURE_FLAGS_DOC }}
                echo "| No differences found |" >> ${{ env.FEATURE_FLAGS_DOC }}
              fi

              if [ ${#deleted_changes[@]} -gt 0 ]; then
                echo "### Deleted Flags" >> ${{ env.FEATURE_FLAGS_DOC }}
                echo "| $latest_branch Value | $previous_branch Value | Status |" >> ${{ env.FEATURE_FLAGS_DOC }}
                echo "|----------------------|------------------------|--------|" >> ${{ env.FEATURE_FLAGS_DOC }}
                printf "%s\n" "${deleted_changes[@]}" >> ${{ env.FEATURE_FLAGS_DOC }}
              else
                echo "### Deleted Flags" >> ${{ env.FEATURE_FLAGS_DOC }}
                echo "| No differences found |" >> ${{ env.FEATURE_FLAGS_DOC }}
              fi
          }

          if [ -n "$latest_branch" ] && [ -n "$previous_branch" ]; then
            generate_summary_table latest_release_flags previous_release_flags "$latest_branch" "$previous_branch" "Comparison: $latest_branch vs. $previous_branch"
            generate_summary_table main_flags latest_release_flags "main" "$latest_branch" "Comparison: main vs. $latest_branch"
            print_standalone_flags latest_release_flags "$latest_branch"
            print_standalone_flags main_flags "main"
          fi

          echo "Generated FEATURE_FLAGS.md content:"
          cat ${{ env.FEATURE_FLAGS_DOC }}

      - name: Cleanup Temporary Files
        run: |
          rm -f main_flags.txt latest_release_flags.txt previous_release_flags.txt

      - name: Commit and Push Changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.FEATURE_FLAGS_DOC }}
          git commit -m "Update feature flags documentation with comparison" || echo "Nothing to commit"
          git push || echo "Nothing to push"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
      - name: Clone the Wiki
        run: |
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/rohit11/MyTripList.wiki.git wiki

      - name: Update Feature Flags page
        run: |
          cp docs/FEATURE_FLAGS.md wiki/Feature-Flags.md
          
      - name: Clean up
        run: rm -rf wiki
